# plot OSM raster data
qtm(CBS_osm1)
qtm(CBS_osm2)
CBS_bb
data(metro)
# sample five cities from metro dataset
set.seed(1234)
five_cities <- metro[sample(length(metro), 5), ]
# obtain reverse geocode address information
addresses <- rev_geocode_OSM(five_cities, zoom = 6)
rev_geocode_OSM
five_cities
rev_geocode_OSM
# obtain reverse geocode address information
addresses <- rev_geocode_OSM(five_cities, zoom = 6)
tm_shape(five_cities) +
tm_markers(text="name")
data(World)
# show different simplification factors
tm1 <- qtm(World %>% simplify_shape(fact = 0.05), title="Simplify 0.05")
tmap_arrange(tm1, tm2, tm3, tm4)
# show different simplification factors
tm1 <- qtm(World %>% simplify_shape(fact = 0.05), title="Simplify 0.05")
data(World)
# show different simplification factors
tm1 <- qtm(World %>% simplify_shape(fact = 0.05), title = "Simplify 0.05")
qtm(World %>% simplify_shape(fact = 0.05), title = "Simplify 0.05")
World %>% simplify_shape(fact = 0.05)
World %>% str
# show different simplification factors
tm1 <- qtm(World %>% simplify_shape(shp = ., fact = 0.05, keep.units = T), title = "Simplify 0.05")
World %>% str
World %>% head
# show different simplification factors
tm1 <- qtm(World %>% simplify_shape(shp = ., fact = 0.05, keep.units = "m"), title = "Simplify 0.05")
# show different simplification factors
tm1 <- qtm(World %>% simplify_shape(shp = ., fact = 0.05), title = "Simplify 0.05")
# show different simplification factors
jsonlite::toJSON(World) %>% head
# show different simplification factors
jsonlite::toJSON(World, force = T) %>% head
# show different simplification factors
jsonlite::toJSON(World, force = T) %>% str
tm1 <- qtm(World %>% simplify_shape(shp = ., fact = 0.05, force = T), title = "Simplify 0.05")
tm1 <- qtm(World %>% simplify_shape(shp = ., fact = 0.05, force_FC = T), title = "Simplify 0.05")
tm1 <- qtm(World %>% simplify_shape(shp = ., fact = 0.05, force_FC = F), title = "Simplify 0.05")
simplify_shape
# show different options for keeping smaller (sub)units
tm5 <- qtm(World %>% simplify_shape(keep.units = TRUE, keep.subunits = TRUE),
title="Keep units and subunits")
tm7 <- qtm(World %>% simplify_shape(keep.units = FALSE),
title="Ignore small units and subunits")
tm6 <- qtm(World %>% simplify_shape(keep.units = TRUE, keep.subunits = FALSE),
title="Keep units, ignore small subunits")
tm4 <- qtm(World %>% simplify_shape(fact = 0.5), title = "Simplify 0.5")
rm(list = ls()); gc()
library(knitr)
library(kableExtra)
library(dplyr)
library(data.table)
library(tmap)
library(tmaptools)
knitr::opts_chunk$set(
# 這邊是針對所有chunk的設定
echo = TRUE,
message = FALSE,
warning = FALSE
)
data(NLD_muni)
NLD_muni %>% head
NLD_muni$area <- approx_areas(NLD_muni, total.area = 33893)
NLD_muni %>% head
tm_shape(NLD_muni) +
tm_bubbles(size="area", title.size = expression("Area in " * km^2))
# function that returns min, max, mean and sum of area values
summary_areas <- function(x) {
list(min_area = min(x),
max_area = max(x),
mean_area = mean(x),
sum_area = sum(x))
}
# area of the polygons
# approx_areas(NLD_muni) %>% head
# approx_areas(NLD_muni) %>% str
approx_areas(NLD_muni) %>% summary_areas()
# area of the polygons, adjusted corrected for a specified total area size
# 多邊形的面積，調整為指定的總面積大小
approx_areas(NLD_muni, total.area = 33893) %>% summary_areas()
# proportional area of the polygons
approx_areas(NLD_muni, target = "prop") %>% summary_areas()
# area in squared miles
approx_areas(NLD_muni, target = "mi mi") %>% summary_areas()
# sf:::st_proj_info()
# ---
# area of the polygons when unprojected
# NLD_muni %>% sf::st_transform(crs = 4326) %>% head
# NLD_muni %>% head
NLD_muni %>% sf::st_transform(crs = 4326) %>% approx_areas() %>% summary_areas()
data(NLD_prov)
# North-South and East-West distances of the Netherlands
approx_distances(NLD_prov)
approx_distances(NLD_prov) %>% str
data(NLD_prov)
# North-South and East-West distances of the Netherlands
approx_distances(NLD_prov)
approx_distances(NLD_prov) %>% str
# Distance between Maastricht and Groningen
p_maastricht <- geocode_OSM("Maastricht")$coords
p_groningen <- geocode_OSM("Groningen")$coords
approx_distances(p_maastricht, p_groningen, projection = 4326, target = "km")
# approx_distances(p_maastricht, p_groningen, target = "km")
#沒有指定prohection，會變成計算普通直角坐標距離。
# Check distances in several projections
# 可知投影真的有差
sapply(c(3035, 28992, 4326), function(projection) {
p_maastricht <- geocode_OSM("Maastricht", projection = projection)$coords
p_groningen <- geocode_OSM("Groningen", projection = projection)$coords
approx_distances(p_maastricht, p_groningen, projection = projection)
})
## load shapes
data(NLD_muni)
data(World)
## get bounding box (similar to sp's function bbox)
bb(NLD_muni)
bb(NLD_muni) %>% str
## extent it by factor 1.10
bb(NLD_muni, ext = 1.10)
## convert to longlat
bb(NLD_muni, projection = 4326)
## change existing bounding box
bb(NLD_muni, ext=1.5)
bb(NLD_muni, width=2, relative = TRUE)
bb(NLD_muni, xlim=c(.25, .75), ylim=c(.25, .75), relative = TRUE)
bb(NLD_muni, xlim=c(.25, .75), ylim=c(.25, .75), relative = F)
data(NLD_muni)
current.mode <- tmap_mode("view")
qtm(bb_poly(NLD_muni))
# restore mode
tmap_mode(current.mode)
data(World)
get_asp_ratio(World)
bb(World)
get_asp_ratio(bb(World))
tm <- qtm(World)
get_asp_ratio(tm)
data(World, NLD_muni, land, metro)
qtm(land, raster = "trees", style = "natural")
# 參數polygon = T，表示區塊的中心要重疊在邊界內才會留下來。
land_NLD <- crop_shape(land, NLD_muni, polygon = T)
# 參數polygon = T，表示區塊的中心要重疊在邊界內才會留下來。
land_NLD <- crop_shape(land, NLD_muni, polygon = T)
qtm(land_NLD, raster = "trees", style = "natural")
ttm()
# 參數polygon = T，表示區塊的中心要重疊在邊界內才會留下來。
land_NLD <- crop_shape(land, NLD_muni, polygon = T)
qtm(land_NLD, raster = "trees", style = "natural")
# 參數polygon = T，表示區塊的中心要重疊在邊界內才會留下來。
tmap_mode("view")
land_NLD <- crop_shape(land, NLD_muni, polygon = T)
qtm(land_NLD, raster = "trees", style = "natural")
# 參數polygon = F，表示區塊只要有碰到邊界，就會算。
land_NLD <- crop_shape(land, NLD_muni, polygon = F)
qtm(land_NLD, raster = "trees", style = "natural")
metro_Europe <- crop_shape(x = metro,
y = World[World$continent == "Europe", ],
polygon = TRUE)
qtm(World) +
tm_shape(metro_Europe) +
tm_bubbles("pop2010", col="red", title.size="European cities") +
tm_legend(frame = TRUE)
# ttm()
data(World)
World %>% head
# show different simplification factors
# simplify_shape(): 函式沒有包好~ 目前失效。
jsonlite::toJSON(World, force = T) %>% str
# ---
tm1 <- qtm(World %>% simplify_shape(shp = ., fact = 0.05, force_FC = F), title = "Simplify 0.05")
get_brewer_pal("Blues")
get_brewer_pal("Blues", contrast = c(.4, .8))
get_brewer_pal("Blues", contrast = c(0, 1))
get_brewer_pal("Blues", n = 15, contrast = c(0, 1))
get_brewer_pal("RdYlGn")
get_brewer_pal("RdYlGn", n=11)
get_brewer_pal("RdYlGn", n=11, contrast = c(0, .4))
get_brewer_pal("RdYlGn", n=11, contrast = c(.4, 1))
get_brewer_pal("Set2", n = 12)
get_brewer_pal("Set2", n = 12, stretch = FALSE)
data(World, metro)
World$color <- map_coloring(World, palette = "Pastel2")
qtm(World, fill = "color")
# map_coloring used indirectly: qtm(World, fill = "MAP_COLORS")
data(NLD_prov, NLD_muni)
tm_shape(NLD_prov) +
tm_fill("name", legend.show = FALSE) +
tm_shape(NLD_muni) +
tm_polygons("MAP_COLORS", palette = "Greys", alpha = .25) +
tm_shape(NLD_prov) +
tm_borders(lwd = 2) +
tm_text("name", shadow = TRUE) +
tm_format(format = "NLD", # Format specified for maps of the Netherlands(為荷蘭地圖指定的格式)
title = "Dutch provinces and\nmunicipalities",
bg.color = "white")
map_coloring(World, palette = "Pastel2")
geocode_OSM("India")
geocode_OSM("CBS Weg 1, Heerlen")
geocode_OSM("CBS Weg 1, Heerlen", projection = 28992)
data(metro)
# sample 5 cities from the metro dataset
five_cities <- metro[sample(length(metro), 5), ]
# obtain geocode locations from their long names
five_cities_geocode <- geocode_OSM(five_cities$name_long, as.sf = TRUE)
five_cities_geocode
# 有差異是因為地名相同。
# ---
# change to interactive mode
current.mode <- tmap_mode("view")
# plot metro coordinates in red and geocode coordinates in blue
# zoom in to see the differences
tm_shape(five_cities) +
tm_dots(col = "blue") +
tm_shape(five_cities_geocode) +
tm_dots(col = "red")
# restore current mode
tmap_mode(current.mode)
# 有差異是因為地名相同。
# ---
# change to interactive mode
current.mode <- tmap_mode("view")
# plot metro coordinates in red and geocode coordinates in blue
# zoom in to see the differences
tm_shape(five_cities) +
tm_dots(col = "blue", size = 5) +
tm_shape(five_cities_geocode) +
tm_dots(col = "red")
# restore current mode
tmap_mode(current.mode)
# 有差異是因為地名相同。
# ---
# change to interactive mode
current.mode <- tmap_mode("view")
# plot metro coordinates in red and geocode coordinates in blue
# zoom in to see the differences
tm_shape(five_cities) +
tm_dots(col = "blue", size = 1) +
tm_shape(five_cities_geocode) +
tm_dots(col = "red")
# restore current mode
tmap_mode(current.mode)
# 有差異是因為地名相同。
# ---
# change to interactive mode
current.mode <- tmap_mode("view")
# plot metro coordinates in red and geocode coordinates in blue
# zoom in to see the differences
tm_shape(five_cities) +
tm_dots(col = "blue", size = 0.5) +
tm_shape(five_cities_geocode) +
tm_dots(col = "red")
# restore current mode
tmap_mode(current.mode)
# 有差異是因為地名相同。
# ---
# change to interactive mode
current.mode <- tmap_mode("view")
# plot metro coordinates in red and geocode coordinates in blue
# zoom in to see the differences
tm_shape(five_cities) +
tm_dots(col = "blue", size = 0.1) +
tm_shape(five_cities_geocode) +
tm_dots(col = "red")
# restore current mode
tmap_mode(current.mode)
# load Netherlands shape
data(NLD_muni)
# read OSM raster data
# 這個函式目前不能用惹~因為他沒有遵守一些 OpenStreetMap的規則
# [Issue with generating maps in RStudio : / Questions and Answers / OpenStreetMap Forum](https://forum.openstreetmap.org/viewtopic.php?id=68079)
osm_NLD <- read_osm(NLD_muni, ext = 1.1)
# plot with regular tmap functions
# tm_shape(osm_NLD) +
# tm_rgb() +
tm_shape(NLD_muni) +
tm_polygons("population", convert2density=TRUE, style="kmeans", alpha=.7, palette="Purples")
tm_shape(NLD_muni) +
tm_polygons("population",
# convert2density =TRUE,
style = "kmeans",
alpha = .7,
palette = "Purples")
tm_shape(NLD_muni) +
tm_polygons("population",
# convert2density =TRUE,
# style = "kmeans",
alpha = .7,
palette = "Purples")
tm_shape(NLD_muni) +
tm_polygons("population",
# convert2density =TRUE,
style = "kmeans",
alpha = .7,
palette = "Purples")
# create a bounding box around the CBS (Statistics Netherlands) building
CBS_bb <- bb("CBS Weg 11, Heerlen", width = .003, height = .002)
# read Microsoft Bing satellite and OpenCycleMap OSM layers
CBS_osm1 <- read_osm(CBS_bb, type = "bing")
CBS_osm2 <- read_osm(CBS_bb, type = "opencyclemap")
# plot OSM raster data
qtm(CBS_osm1)
qtm(CBS_osm2)
tm_shape(five_cities) +
tm_markers(text="name")
data(NLD_muni)
NLD_muni_pop_per_km2 <- calc_densities(NLD_muni,
var = c("pop_men", "pop_women"),
target = "km km")
NLD_muni_pop_per_km2 %>% head
NLD_muni <- sf::st_sf(data.frame(NLD_muni, NLD_muni_pop_per_km2))
tm_shape(NLD_muni) +
tm_polygons(c("pop_men_km.2", "pop_women_km.2"),
title = expression("Population per " * km^2), style = "quantile") +
tm_facets(free.scales = FALSE) +
tm_layout(panel.show = TRUE, panel.labels = c("Men", "Women"))
rm(list = ls()); gc()
library(knitr)
library(kableExtra)
library(dplyr)
library(data.table)
library(tmap)
library(tmaptools)
knitr::opts_chunk$set(
# 這邊是針對所有chunk的設定
echo = TRUE,
message = FALSE,
warning = FALSE
)
data(NLD_muni)
NLD_muni %>% head
NLD_muni$area <- approx_areas(NLD_muni, total.area = 33893)
NLD_muni %>% head
tm_shape(NLD_muni) +
tm_bubbles(size="area", title.size = expression("Area in " * km^2))
# function that returns min, max, mean and sum of area values
summary_areas <- function(x) {
list(min_area = min(x),
max_area = max(x),
mean_area = mean(x),
sum_area = sum(x))
}
# area of the polygons
# approx_areas(NLD_muni) %>% head
# approx_areas(NLD_muni) %>% str
approx_areas(NLD_muni) %>% summary_areas()
# area of the polygons, adjusted corrected for a specified total area size
# 多邊形的面積，調整為指定的總面積大小
approx_areas(NLD_muni, total.area = 33893) %>% summary_areas()
# proportional area of the polygons
approx_areas(NLD_muni, target = "prop") %>% summary_areas()
# area in squared miles
approx_areas(NLD_muni, target = "mi mi") %>% summary_areas()
# sf:::st_proj_info()
# ---
# area of the polygons when unprojected
# NLD_muni %>% sf::st_transform(crs = 4326) %>% head
# NLD_muni %>% head
NLD_muni %>% sf::st_transform(crs = 4326) %>% approx_areas() %>% summary_areas()
data(NLD_prov)
# North-South and East-West distances of the Netherlands
approx_distances(NLD_prov)
approx_distances(NLD_prov) %>% str
# Distance between Maastricht and Groningen
p_maastricht <- geocode_OSM("Maastricht")$coords
p_groningen <- geocode_OSM("Groningen")$coords
approx_distances(p_maastricht, p_groningen, projection = 4326, target = "km")
# approx_distances(p_maastricht, p_groningen, target = "km")
# 沒有指定projection，會變成計算普通直角坐標距離。
# Check distances in several projections
# 可知投影真的有差
sapply(c(3035, 28992, 4326), function(projection) {
p_maastricht <- geocode_OSM("Maastricht", projection = projection)$coords
p_groningen <- geocode_OSM("Groningen", projection = projection)$coords
approx_distances(p_maastricht, p_groningen, projection = projection)
})
## load shapes
data(NLD_muni)
data(World)
## get bounding box (similar to sp's function bbox)
bb(NLD_muni)
bb(NLD_muni) %>% str
## extent it by factor 1.10
bb(NLD_muni, ext = 1.10)
## convert to longlat
bb(NLD_muni, projection = 4326)
## change existing bounding box
bb(NLD_muni, ext=1.5)
bb(NLD_muni, width=2, relative = TRUE)
bb(NLD_muni, xlim=c(.25, .75), ylim=c(.25, .75), relative = TRUE)
bb(NLD_muni, xlim=c(.25, .75), ylim=c(.25, .75), relative = F)
data(NLD_muni)
current.mode <- tmap_mode("view")
qtm(bb_poly(NLD_muni))
# restore mode
tmap_mode(current.mode)
data(World)
get_asp_ratio(World)
bb(World)
get_asp_ratio(bb(World))
tm <- qtm(World)
get_asp_ratio(tm)
data(World, NLD_muni, land, metro)
qtm(land, raster = "trees", style = "natural")
# 參數polygon = T，表示區塊的中心要重疊在邊界內才會留下來。
tmap_mode("view")
land_NLD <- crop_shape(land, NLD_muni, polygon = T)
data(World, NLD_muni, land, metro)
qtm(land, raster = "trees", style = "natural")
# 參數polygon = T，表示區塊的中心要重疊在邊界內才會留下來。
tmap_mode("view")
land_NLD <- crop_shape(land, NLD_muni, polygon = T)
# 參數polygon = T，表示區塊的中心要重疊在邊界內才會留下來。
tmap_mode("view")
land_NLD <- crop_shape(land, NLD_muni, polygon = T)
qtm(land_NLD, raster = "trees", style = "natural")
data(NLD_muni)
View(NLD_muni)
land_NLD <- crop_shape(land, NLD_muni, polygon = T)
# 參數polygon = F，表示區塊只要有碰到邊界，就會算。
land_NLD <- crop_shape(land, NLD_muni, polygon = F)
metro_Europe <- crop_shape(x = metro,
y = World[World$continent == "Europe", ],
polygon = TRUE)
qtm(World) +
tm_shape(metro_Europe) +
tm_bubbles("pop2010", col="red", title.size="European cities") +
tm_legend(frame = TRUE)
# ttm()
data(World)
World %>% head
# show different simplification factors
# simplify_shape(): 函式沒有包好~ 目前失效。
jsonlite::toJSON(World, force = T) %>% str
# ---
tm1 <- qtm(World %>% simplify_shape(shp = ., fact = 0.05, force_FC = F), title = "Simplify 0.05")
# ---
tm1 <- qtm(World %>% simplify_shape(shp = ., fact = 0.05, force_FC = F), title = "Simplify 0.05")
tm2 <- qtm(World %>% simplify_shape(fact = 0.1), title = "Simplify 0.1")
tm3 <- qtm(World %>% simplify_shape(fact = 0.2), title = "Simplify 0.2")
tm4 <- qtm(World %>% simplify_shape(fact = 0.5), title = "Simplify 0.5")
tmap_arrange(tm1, tm2, tm3, tm4)
tm5 <- qtm(World %>% simplify_shape(keep.units = TRUE, keep.subunits = TRUE),
title="Keep units and subunits")
tm6 <- qtm(World %>% simplify_shape(keep.units = TRUE, keep.subunits = FALSE),
title="Keep units, ignore small subunits")
tm7 <- qtm(World %>% simplify_shape(keep.units = FALSE),
title="Ignore small units and subunits")
tmap_arrange(tm5, tm6, tm7)
get_brewer_pal("Blues")
get_brewer_pal("Blues", contrast = c(.4, .8))
get_brewer_pal("Blues", contrast = c(0, 1))
get_brewer_pal("Blues", n = 15, contrast = c(0, 1))
get_brewer_pal("RdYlGn")
get_brewer_pal("RdYlGn", n=11)
get_brewer_pal("RdYlGn", n=11, contrast = c(0, .4))
get_brewer_pal("RdYlGn", n=11, contrast = c(.4, 1))
get_brewer_pal("Set2", n = 12)
get_brewer_pal("Set2", n = 12, stretch = FALSE)
data(World, metro)
World$color <- map_coloring(World, palette = "Pastel2")
qtm(World, fill = "color")
# map_coloring used indirectly: qtm(World, fill = "MAP_COLORS")
data(NLD_prov, NLD_muni)
tm_shape(NLD_prov) +
tm_fill("name", legend.show = FALSE) +
tm_shape(NLD_muni) +
tm_polygons("MAP_COLORS", palette = "Greys", alpha = .25) +
tm_shape(NLD_prov) +
tm_borders(lwd = 2) +
tm_text("name", shadow = TRUE) +
tm_format(format = "NLD", # Format specified for maps of the Netherlands(為荷蘭地圖指定的格式)
title = "Dutch provinces and\nmunicipalities",
bg.color = "white")
geocode_OSM("India")
geocode_OSM("CBS Weg 1, Heerlen")
geocode_OSM("CBS Weg 1, Heerlen", projection = 28992)
data(metro)
# sample 5 cities from the metro dataset
five_cities <- metro[sample(length(metro), 5), ]
# obtain geocode locations from their long names
five_cities_geocode <- geocode_OSM(five_cities$name_long, as.sf = TRUE)
five_cities_geocode
# 有差異是因為地名相同。
# ---
# change to interactive mode
current.mode <- tmap_mode("view")
# plot metro coordinates in red and geocode coordinates in blue
# zoom in to see the differences
tm_shape(five_cities) +
tm_dots(col = "blue", size = 0.1) +
tm_shape(five_cities_geocode) +
tm_dots(col = "red")
# restore current mode
tmap_mode(current.mode)
# load Netherlands shape
data(NLD_muni)
# read OSM raster data
# 這個函式目前不能用惹~因為他沒有遵守一些 OpenStreetMap的規則
# [Issue with generating maps in RStudio : / Questions and Answers / OpenStreetMap Forum](https://forum.openstreetmap.org/viewtopic.php?id=68079)
osm_NLD <- read_osm(NLD_muni, ext = 1.1)
# read OSM raster data
# 這個函式目前不能用惹~因為他沒有遵守一些 OpenStreetMap的規則
# [Issue with generating maps in RStudio : / Questions and Answers / OpenStreetMap Forum](https://forum.openstreetmap.org/viewtopic.php?id=68079)
osm_NLD <- read_osm(NLD_muni, ext = 1.1)
